name: CI/CD with AWS SSM

on:
  push:
    branches: [main]

env:
  AWS_REGION: eu-west-2

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS credentials
        run: |
          aws sts get-caller-identity
          aws configure list

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Create .env.test file with DB password
        run: |
          echo "DB_PASSWORD=${{ secrets.TEST_DB_PASSWORD }}" > .env.test

      - name: Build Docker containers
        run: |
          docker-compose --env-file .env.test build

      - name: Run Django tests
        run: |
          docker-compose --env-file .env.test run --rm \
            -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
            -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
            -e AWS_REGION=$AWS_REGION \
            web python manage.py test

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Fetch Postgres Password from SSM
        id: fetch_pgpass
        run: |
          DB_PASSWORD=$(aws ssm get-parameter \
            --name "/prod/django/workoutapi/DB_PASSWORD" \
            --with-decryption \
            --query "Parameter.Value" \
            --output text)
          echo "::add-mask::$DB_PASSWORD"
          echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV

      - name: Verify EC2 Status
        run: |
          aws ec2 describe-instance-status \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --query 'InstanceStatuses[0].InstanceState.Name'
          
          aws ssm describe-instance-information \
            --filters "Key=InstanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}"

      - name: Deploy to EC2 via SSM
        id: deploy_ssm
        run: |
          aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy Django Docker App" \
            --parameters commands='[
              "export POSTGRES_PASSWORD='${{ env.POSTGRES_PASSWORD }}'",
              "cd /home/ec2-user/awsdjangotest",
              "git pull origin main",
              "docker-compose down",
              "docker-compose up -d --build",
              "docker-compose exec -T web python manage.py migrate --noinput"
            ]' \
            --output json > result.json

          COMMAND_ID=$(jq -r '.Command.CommandId' result.json)
          echo "command_id=$COMMAND_ID" >> $GITHUB_OUTPUT

      - name: Wait for deployment command to complete
        run: |
          aws ssm wait command-executed \
            --command-id "${{ steps.deploy_ssm.outputs.command_id }}" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}"

