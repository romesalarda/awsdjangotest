# Generated by Django 5.1.5 on 2025-09-06 17:04

import django.core.validators
import django.db.models.deletion
import django_countries.fields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("users", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AreaLocation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "area_id",
                    models.CharField(blank=True, null=True, verbose_name="area-id"),
                ),
                (
                    "area_name",
                    models.CharField(max_length=150, verbose_name="name-of-area"),
                ),
                (
                    "area_code",
                    models.CharField(
                        max_length=3, null=True, unique=True, verbose_name="area-code"
                    ),
                ),
                (
                    "general_address",
                    models.CharField(
                        help_text="general postcode/address", max_length=100
                    ),
                ),
                ("location_description", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="ClusterLocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "cluster_id",
                    models.CharField(max_length=2, verbose_name="cluster-name"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CountryLocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "country",
                    django_countries.fields.CountryField(
                        blank=True, max_length=2, null=True, unique=True
                    ),
                ),
                (
                    "general_sector",
                    models.CharField(
                        choices=[
                            ("EUROPE", "Europe"),
                            ("ASIA", "Asia"),
                            ("NORTH_AMERICA", "North America"),
                            ("CENTRAL_AMERICA", "Central America"),
                            ("SOUTH_AMERICA", "South America"),
                            ("AFRICA", "Africa"),
                            ("OCEANIA", "Oceania"),
                            ("MIDDLE_EAST", "Middle East"),
                        ],
                        verbose_name="general world sector",
                    ),
                ),
                (
                    "specific_sector",
                    models.CharField(
                        choices=[
                            ("NORTH_EUROPE", "Northern Europe"),
                            ("SOUTH_EUROPE", "Southern Europe"),
                            ("WEST_EUROPE", "Western Europe"),
                            ("EAST_EUROPE", "Eastern Europe"),
                            ("CENTRAL_EUROPE", "Central Europe"),
                            ("EAST_ASIA", "East Asia"),
                            ("SOUTH_ASIA", "South Asia"),
                            ("SOUTHEAST_ASIA", "Southeast Asia"),
                            ("CENTRAL_ASIA", "Central Asia"),
                            ("WEST_ASIA", "Western Asia"),
                            ("NORTH_AMERICA", "North America"),
                            ("CENTRAL_AMERICA", "Central America"),
                            ("CARIBBEAN", "Caribbean"),
                            ("SOUTH_AMERICA_NORTH", "Northern South America"),
                            ("SOUTH_AMERICA_SOUTH", "Southern South America"),
                            ("ANDES", "Andean Region"),
                            ("CONO_SUR", "Cono Sur (Southern Cone)"),
                            ("NORTH_AFRICA", "North Africa"),
                            ("WEST_AFRICA", "West Africa"),
                            ("EAST_AFRICA", "East Africa"),
                            ("CENTRAL_AFRICA", "Central Africa"),
                            ("SOUTH_AFRICA", "Southern Africa"),
                            ("AUSTRALIA_NEWZEALAND", "Australia & New Zealand"),
                            ("MELANESIA", "Melanesia"),
                            ("MICRONESIA", "Micronesia"),
                            ("POLYNESIA", "Polynesia"),
                            ("GULF", "Gulf States"),
                            ("LEVANT", "Levant"),
                            ("PERSIAN", "Persian Region"),
                        ],
                        verbose_name="specific world sector",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventRole",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="event role id",
                    ),
                ),
                (
                    "role_name",
                    models.CharField(
                        choices=[
                            ("ASSISTANT_TEAM_LEADER", "Assistant Team Leader"),
                            ("CAMP_SERVANT", "Camp Servant"),
                            ("FACILITATOR", "Facilitator"),
                            ("GAMES_MASTER", "Games Master"),
                            ("COUPLE_COORDINATOR", "Couple Coordinator"),
                            ("SHARER", "Sharer"),
                            ("SPEAKER", "Speaker"),
                            ("TEAM_LEADER", "Team Leader"),
                            ("WORSHIP_LEADER", "Worship Leader"),
                            ("TECH_SUPPORT", "Tech Support"),
                            ("YOUTH_OBSERVER", "Youth Observer"),
                            ("CFC_OBSERVER", "CFC Observer"),
                            ("CFC_HELPER", "CFC Helper"),
                            ("CFC_COORDINATOR", "Coordinator"),
                            ("SFC_HELPER", "SFC Helper"),
                            ("VOLUNTEER", "Volunteer"),
                            ("ORGANIZER", "Organizer"),
                            ("SECRETARIAT", "Secretariat"),
                            ("PROGRAMME", "Programme"),
                            ("PFO", "PFO"),
                            ("PRODUCTION", "Production"),
                            ("LOGISTICS", "Logistics"),
                            ("MUSIC_MINISTRY", "Music Ministry"),
                            ("LITURGY", "Liturgy"),
                            ("COMPETITIONS", "Competitions"),
                            ("PROMOTIONS", "Promotions"),
                            ("DOCUMENTATION", "Documentation"),
                            ("EVENT_HEADS", "Event_heads"),
                            ("GENERAL_SERVICES", "General Services"),
                            ("CATERING", "Catering"),
                        ],
                        max_length=50,
                        unique=True,
                        verbose_name="role name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, null=True, verbose_name="role description"
                    ),
                ),
            ],
            options={
                "verbose_name": "Event Role",
                "verbose_name_plural": "Event Roles",
                "ordering": ["role_name"],
            },
        ),
        migrations.CreateModel(
            name="PublicEventResource",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="resource id",
                    ),
                ),
                (
                    "resource_name",
                    models.CharField(verbose_name="public resource name"),
                ),
                (
                    "resource_link",
                    models.CharField(
                        blank=True, null=True, verbose_name="public resource link"
                    ),
                ),
                (
                    "resource_file",
                    models.FileField(
                        upload_to="public-event-resources", verbose_name="file resource"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("public_resource", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="ChapterLocation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "chapter_id",
                    models.CharField(blank=True, null=True, verbose_name="chapter-id"),
                ),
                (
                    "chapter_name",
                    models.CharField(max_length=150, verbose_name="name-of-chapter"),
                ),
                (
                    "chapter_code",
                    models.CharField(
                        max_length=3, null=True, verbose_name="chapter-code"
                    ),
                ),
                (
                    "cluster",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chapters",
                        to="events.clusterlocation",
                    ),
                ),
            ],
            options={
                "unique_together": {("chapter_name", "cluster")},
            },
        ),
        migrations.AddField(
            model_name="clusterlocation",
            name="world_location",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="clusters",
                to="events.countrylocation",
            ),
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("YOUTH_CAMP", "Youth Camp"),
                            ("CONFERENCE", "Conference"),
                            ("RETREAT", "Retreat"),
                            ("WORKSHOP", "Workshop"),
                            ("TRAINING", "Training"),
                            ("PFO", "PFO"),
                            ("HOUSEHOLD", "Household"),
                            ("FELLOWSHIP", "Fellowship"),
                            ("OTHER", "Other"),
                        ],
                        default="YOUTH_CAMP",
                        max_length=20,
                        verbose_name="event type",
                    ),
                ),
                (
                    "event_description",
                    models.TextField(
                        blank=True, null=True, verbose_name="event description"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="event name"
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="event start date"
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="event end date"
                    ),
                ),
                (
                    "venue_address",
                    models.CharField(
                        blank=True,
                        max_length=300,
                        null=True,
                        verbose_name="venue address",
                    ),
                ),
                (
                    "venue_name",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="venue name"
                    ),
                ),
                (
                    "area_type",
                    models.CharField(
                        choices=[
                            ("AREA", "Area"),
                            ("UNIT", "Unit"),
                            ("CLUSTER", "Cluster"),
                            ("NATIONAL", "National"),
                            ("CONTINENTAL", "Continental"),
                            ("INTERNATIONAL", "International"),
                        ],
                        default="AREA",
                        max_length=20,
                        verbose_name="area type",
                    ),
                ),
                (
                    "number_of_pax",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="number of participants",
                    ),
                ),
                (
                    "theme",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="event theme",
                    ),
                ),
                (
                    "anchor_verse",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="anchor verse",
                    ),
                ),
                (
                    "areas_involved",
                    models.ManyToManyField(
                        blank=True,
                        related_name="involved_in_events",
                        to="events.arealocation",
                    ),
                ),
                (
                    "specific_area",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="events",
                        to="events.arealocation",
                    ),
                ),
                (
                    "supervising_chapter_CFC_coordinator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="cfc_supervised_events",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="youth CFC coordinator supervisor",
                    ),
                ),
                (
                    "supervising_chapter_youth_head",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="supervised_events",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="youth chapter head supervisor",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventServiceTeamMember",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="serivce team member id",
                    ),
                ),
                ("head_of_role", models.BooleanField(default=False)),
                ("assigned_at", models.DateTimeField(auto_now_add=True)),
                (
                    "assigned_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_event_members",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="service_team_members",
                        to="events.event",
                    ),
                ),
                (
                    "roles",
                    models.ManyToManyField(
                        blank=True,
                        related_name="service_team_members",
                        to="events.eventrole",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_memberships",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Event Service Team Member",
                "verbose_name_plural": "Event Service Team Members",
                "unique_together": {("user", "event")},
            },
        ),
        migrations.AddField(
            model_name="event",
            name="service_team",
            field=models.ManyToManyField(
                blank=True,
                related_name="events_service_team",
                through="events.EventServiceTeamMember",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="EventTalk",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="talk title")),
                (
                    "talk_type",
                    models.CharField(
                        choices=[
                            ("TALK", "Talk"),
                            ("SHARING", "Sharing"),
                            ("WORKSHOP", "Workshop"),
                            ("BREAKOUT", "Breakout Session"),
                            ("PLENARY", "Plenary Session"),
                        ],
                        default="TALK",
                        max_length=20,
                        verbose_name="talk type",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="description"),
                ),
                (
                    "objective",
                    models.TextField(blank=True, null=True, verbose_name="objective"),
                ),
                ("start_time", models.DateTimeField(verbose_name="start time")),
                ("end_time", models.DateTimeField(verbose_name="end time")),
                (
                    "duration_minutes",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="duration in minutes",
                    ),
                ),
                (
                    "speaker_bio",
                    models.TextField(blank=True, null=True, verbose_name="speaker bio"),
                ),
                (
                    "venue",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="venue"
                    ),
                ),
                (
                    "room",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="room"
                    ),
                ),
                (
                    "slides_url",
                    models.URLField(blank=True, null=True, verbose_name="slides URL"),
                ),
                (
                    "handout_url",
                    models.URLField(blank=True, null=True, verbose_name="handout URL"),
                ),
                (
                    "video_url",
                    models.URLField(blank=True, null=True, verbose_name="video URL"),
                ),
                (
                    "is_published",
                    models.BooleanField(default=True, verbose_name="is published"),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="talks",
                        to="events.event",
                    ),
                ),
                (
                    "speaker",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="event_talks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Event Talk",
                "verbose_name_plural": "Event Talks",
                "ordering": ["start_time"],
            },
        ),
        migrations.CreateModel(
            name="EventWorkshop",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "title",
                    models.CharField(max_length=200, verbose_name="workshop title"),
                ),
                ("description", models.TextField(verbose_name="description")),
                ("objectives", models.TextField(verbose_name="learning objectives")),
                ("start_time", models.DateTimeField(verbose_name="start time")),
                ("end_time", models.DateTimeField(verbose_name="end time")),
                (
                    "duration_minutes",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="duration in minutes",
                    ),
                ),
                (
                    "max_participants",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="maximum participants",
                    ),
                ),
                (
                    "min_participants",
                    models.IntegerField(
                        default=1,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="minimum participants",
                    ),
                ),
                (
                    "venue",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="venue"
                    ),
                ),
                (
                    "room",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="room"
                    ),
                ),
                (
                    "prerequisites",
                    models.TextField(
                        blank=True, null=True, verbose_name="prerequisites"
                    ),
                ),
                (
                    "materials_needed",
                    models.TextField(
                        blank=True, null=True, verbose_name="materials needed"
                    ),
                ),
                (
                    "participant_preparation",
                    models.TextField(
                        blank=True, null=True, verbose_name="participant preparation"
                    ),
                ),
                (
                    "resource_materials",
                    models.TextField(
                        blank=True, null=True, verbose_name="resource materials"
                    ),
                ),
                (
                    "handout_url",
                    models.URLField(blank=True, null=True, verbose_name="handout URL"),
                ),
                (
                    "is_published",
                    models.BooleanField(default=True, verbose_name="is published"),
                ),
                ("is_full", models.BooleanField(default=False, verbose_name="is full")),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="workshops",
                        to="events.event",
                    ),
                ),
                (
                    "facilitators",
                    models.ManyToManyField(
                        blank=True,
                        related_name="facilitated_workshops",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "primary_facilitator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="primary_workshops",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Event Workshop",
                "verbose_name_plural": "Event Workshops",
                "ordering": ["start_time"],
            },
        ),
        migrations.CreateModel(
            name="GuestParticipant",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="guest id",
                    ),
                ),
                ("outside_of_country", models.BooleanField(default=False)),
                (
                    "ministry_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("YFC", "Youth for Christ"),
                            ("CFC", "Couples for Christ"),
                            ("SFC", "Singles for Christ"),
                            ("KFC", "Kids for Christ"),
                            ("GTY", "Guest Youth"),
                            ("GTA", "Guest Adult"),
                            ("VLN", "Volunteer"),
                            ("VST", "Visitor"),
                            ("OTH", "Other"),
                        ],
                        default="GTY",
                        null=True,
                        verbose_name="Family Ministry",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        null=True,
                        unique=True,
                        verbose_name="participant email address",
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        verbose_name="participant phone number",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="participant first name",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="participant last name",
                    ),
                ),
                (
                    "middle_name",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="participant middle name",
                    ),
                ),
                (
                    "preferred_name",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="participant preferred name",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("MALE", "Male"),
                            ("FEMALE", "Female"),
                            ("PREFER_NOT_TO_SAY", "Prefer not to say"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="participant gender",
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        blank=True,
                        help_text="Format: YYYY-MM-DD",
                        null=True,
                        verbose_name="participant date of birth",
                    ),
                ),
                (
                    "profile_picture",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="guest-event-profile-images/",
                        verbose_name="participant event profile picture",
                    ),
                ),
                (
                    "further_alergy_information",
                    models.TextField(
                        blank=True, null=True, verbose_name="other alergy information"
                    ),
                ),
                (
                    "alergies",
                    models.ManyToManyField(
                        blank=True,
                        related_name="user_alergies",
                        to="users.alergies",
                        verbose_name="Individual alergies",
                    ),
                ),
                (
                    "chapter",
                    models.ManyToManyField(
                        blank=True,
                        related_name="chapter_events",
                        to="events.chapterlocation",
                    ),
                ),
                (
                    "country_of_origin",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="events.countrylocation",
                    ),
                ),
                (
                    "emergency_contacts",
                    models.ManyToManyField(
                        blank=True,
                        related_name="guest_user_emergency_contacts",
                        to="users.emergencycontact",
                        verbose_name="Emergency contacts",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UnitLocation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "unit_id",
                    models.CharField(blank=True, null=True, verbose_name="unit-id"),
                ),
                ("unit_name", models.CharField(max_length=2, verbose_name="unit name")),
                (
                    "chapter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="units",
                        to="events.chapterlocation",
                    ),
                ),
            ],
            options={
                "unique_together": {("unit_name", "chapter")},
            },
        ),
        migrations.AddField(
            model_name="arealocation",
            name="unit",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="areas",
                to="events.unitlocation",
            ),
        ),
        migrations.CreateModel(
            name="EventParticipant",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "participant_type",
                    models.CharField(
                        choices=[
                            ("PARTICIPANT", "Participant"),
                            ("SERVICE_TEAM", "Service_team"),
                            ("OBSERVER", "Observer"),
                            ("GUEST", "Guest"),
                            ("SPEAKER", "Speaker"),
                            ("VOLUNTEER", "Volunteer"),
                        ],
                        default="PARTICIPANT",
                        max_length=20,
                        verbose_name="participant type",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("REGISTERED", "Registered"),
                            ("CONFIRMED", "Confirmed"),
                            ("ATTENDED", "Attended"),
                            ("CANCELLED", "Cancelled"),
                            ("WAITLISTED", "Waitlisted"),
                        ],
                        default="REGISTERED",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "registration_date",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="registration date"
                    ),
                ),
                (
                    "confirmation_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="confirmation date"
                    ),
                ),
                (
                    "attended_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="attended date"
                    ),
                ),
                ("media_consent", models.BooleanField(default=False)),
                ("data_consent", models.BooleanField(default=False)),
                ("understood_registration", models.BooleanField(default=False)),
                (
                    "dietary_restrictions",
                    models.TextField(
                        blank=True, null=True, verbose_name="dietary restrictions"
                    ),
                ),
                (
                    "special_needs",
                    models.TextField(
                        blank=True, null=True, verbose_name="special needs"
                    ),
                ),
                (
                    "emergency_contact",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="emergency contact",
                    ),
                ),
                (
                    "emergency_phone",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        verbose_name="emergency phone",
                    ),
                ),
                (
                    "paid_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        max_digits=10,
                        verbose_name="paid amount",
                    ),
                ),
                (
                    "payment_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="payment date"
                    ),
                ),
                (
                    "payment_method",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="payment method",
                    ),
                ),
                (
                    "notes",
                    models.TextField(blank=True, null=True, verbose_name="notes"),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="participants",
                        to="events.event",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_participations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "guest_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_participations",
                        to="events.guestparticipant",
                    ),
                ),
                (
                    "memo",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="event_memos",
                        to="events.publiceventresource",
                        verbose_name="main event memo",
                    ),
                ),
                (
                    "resources",
                    models.ManyToManyField(
                        blank=True,
                        related_name="event_resources",
                        to="events.publiceventresource",
                    ),
                ),
            ],
            options={
                "verbose_name": "Event Participant",
                "verbose_name_plural": "Event Participants",
                "ordering": ["registration_date"],
                "unique_together": {("event", "user")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="arealocation",
            unique_together={("area_name", "unit")},
        ),
    ]
