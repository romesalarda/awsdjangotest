# Generated by Django 5.1.5 on 2025-09-06 17:03

import datetime
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Alergies",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "alergy_name",
                    models.CharField(max_length=200, verbose_name="name of alergy"),
                ),
                (
                    "alergy_description",
                    models.TextField(
                        blank=True, null=True, verbose_name="alergy description"
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Alergies",
            },
        ),
        migrations.CreateModel(
            name="CommunityRole",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role_name",
                    models.CharField(
                        choices=[
                            ("MEM", "Member"),
                            ("NAT_HEAD", "National Head"),
                            ("YCOM_NAT_HEAD", "YCOM National Head"),
                            ("MUSIC_NAT_HEAD", "Music Ministry National Head"),
                            ("CLUSTER_HEAD", "Cluster Head"),
                            ("AREA_HEAD", "Area Head"),
                            ("CHAPTER_HEAD", "Chapter Head"),
                            ("HOUSEHOLD_HEAD", "Household Head"),
                            ("SUPPORT_HH_HEAD", "Supporting Household Head"),
                            ("SECTOR_HEAD", "Sector Head"),
                            ("VOLUNTEER", "Volunteer"),
                            ("GUEST", "Guest"),
                        ],
                        default="MEM",
                        max_length=20,
                        verbose_name="role name",
                    ),
                ),
                (
                    "role_description",
                    models.TextField(max_length=500, verbose_name="role description"),
                ),
                (
                    "is_core",
                    models.BooleanField(
                        default=False,
                        help_text="Defines if the role is a core role",
                        verbose_name="is core role",
                    ),
                ),
            ],
            options={
                "verbose_name": "community role",
                "verbose_name_plural": "community roles",
                "ordering": ["role_name"],
            },
        ),
        migrations.CreateModel(
            name="EmergencyContact",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="emergency contact id",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=50, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(max_length=50, verbose_name="last name"),
                ),
                (
                    "middle_name",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="middle name"
                    ),
                ),
                (
                    "preferred_name",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="preferred name",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        null=True,
                        unique=True,
                        verbose_name="emergency contact email address",
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        verbose_name="emergency contact phone number",
                    ),
                ),
                (
                    "contact_relationship",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("MOTHER", "Mother"),
                            ("FATHER", "Father"),
                            ("GUARDIAN", "Guardian"),
                            ("SPOUSE", "Spouse"),
                            ("HUSBAND", "Husband"),
                            ("WIFE", "Wife"),
                            ("BROTHER", "Brother"),
                            ("SISTER", "Sister"),
                        ],
                        null=True,
                        verbose_name="emergency contact relationship",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CommunityUser",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "member_id",
                    models.CharField(
                        editable=False,
                        max_length=100,
                        unique=True,
                        verbose_name="member ID",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="username"
                    ),
                ),
                (
                    "ministry",
                    models.CharField(
                        choices=[
                            ("YFC", "Youth for Christ"),
                            ("CFC", "Couples for Christ"),
                            ("SFC", "Singles for Christ"),
                            ("KFC", "Kids for Christ"),
                            ("GST", "Guest"),
                            ("VLN", "Volunteer"),
                        ],
                        default="CFC",
                        max_length=3,
                        verbose_name="ministry",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        null=True,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        verbose_name="phone number",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=50, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(max_length=50, verbose_name="last name"),
                ),
                (
                    "middle_name",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="middle name"
                    ),
                ),
                (
                    "preferred_name",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="preferred name",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("MALE", "Male"), ("FEMALE", "Female")],
                        max_length=6,
                        verbose_name="gender",
                    ),
                ),
                (
                    "age",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(150),
                        ],
                        verbose_name="age",
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        blank=True,
                        help_text="Format: YYYY-MM-DD",
                        null=True,
                        verbose_name="date of birth",
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="active")),
                (
                    "is_staff",
                    models.BooleanField(default=False, verbose_name="staff status"),
                ),
                (
                    "is_encoder",
                    models.BooleanField(default=False, verbose_name="encoder status"),
                ),
                (
                    "profile_picture",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="profile-images/",
                        verbose_name="profile picture",
                    ),
                ),
                (
                    "uploaded_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="uploaded at"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "alergies",
                    models.ManyToManyField(
                        blank=True,
                        related_name="users",
                        to="users.alergies",
                        verbose_name="Individual alergies",
                    ),
                ),
                (
                    "emergency_contacts",
                    models.ManyToManyField(
                        blank=True,
                        related_name="user_emergency_contacts",
                        to="users.emergencycontact",
                        verbose_name="Emergency contacts",
                    ),
                ),
            ],
            options={
                "verbose_name": "community user",
                "verbose_name_plural": "community users",
                "ordering": ["last_name", "first_name"],
            },
        ),
        migrations.CreateModel(
            name="UserCommunityRole",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "assigned_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="assigned at"),
                ),
                (
                    "start_date",
                    models.DateField(
                        default=datetime.date.today, verbose_name="start date"
                    ),
                ),
                (
                    "end_date",
                    models.DateField(blank=True, null=True, verbose_name="end date"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="active")),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional information about this role assignment",
                        null=True,
                        verbose_name="notes",
                    ),
                ),
                (
                    "assigned_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_roles",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="assigned by",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_links",
                        to="users.communityrole",
                        verbose_name="role",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="role_links",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "user community role",
                "verbose_name_plural": "user community roles",
                "ordering": ["-assigned_at"],
                "unique_together": {("user", "role")},
            },
        ),
        migrations.AddField(
            model_name="communityuser",
            name="community_roles",
            field=models.ManyToManyField(
                blank=True,
                help_text="role/s in the community",
                related_name="users",
                through="users.UserCommunityRole",
                to="users.communityrole",
            ),
        ),
    ]
