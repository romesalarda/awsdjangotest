# Generated by Django 5.1.5 on 2025-09-06 11:16

import datetime
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CommunityRole",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role_name",
                    models.CharField(
                        choices=[
                            ("MEM", "MEMBER"),
                            ("NATIONAL_HEAD", "NATIONAL_HEAD"),
                            ("YCOM_NATIONAL_HEAD", "YCOM_NATIONAL_HEAD"),
                            ("MUSIC_MIN_NATIONAL_HEAD", "MUSIC_MIN_NATIONAL_HEAD"),
                            ("CLUSTER_HEAD", "CLUSTER_HEAD"),
                            ("AREA_HEAD", "AREA_HEAD"),
                            ("CHAPTER_HEAD", "CHAPTER_HEAD"),
                            ("HOUSEHOLD_HEAD", "HOUSEHOLD_HEAD"),
                            ("SUPPORTING_HOUSEHOLD_HEAD", "SUPPORTING_HOUSEHOLD_HEAD"),
                            ("SECTOR_HEAD", "SECTOR_HEAD"),
                        ],
                        default="MEM",
                        verbose_name="name-of-role",
                    ),
                ),
                ("role_description", models.TextField(max_length=500)),
                (
                    "is_core",
                    models.BooleanField(
                        default=False,
                        help_text="Defines if the role is a core role",
                        verbose_name="is_core_role",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CommunityUser",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "member_id",
                    models.CharField(editable=False, max_length=100, unique=True),
                ),
                ("username", models.CharField(max_length=100, unique=True)),
                (
                    "ministry",
                    models.CharField(
                        choices=[
                            ("YFC", "YOUTH_FOR_CHRIST"),
                            ("CFC", "COUPLES_FOR_CHRIST"),
                            ("SFC", "SINGLES_FOR_CHRIST"),
                            ("KFC", "KIDS_FOR_CHRIST"),
                        ],
                        default="CFC",
                        max_length=3,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, null=True, unique=True
                    ),
                ),
                ("phone_number", models.IntegerField(blank=True, null=True)),
                ("first_name", models.CharField(max_length=50)),
                ("last_name", models.CharField(max_length=50)),
                ("middle_name", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "preferred_name",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("MALE", "MALE"), ("FEMALE", "FEMALE")], max_length=6
                    ),
                ),
                (
                    "age",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(150),
                        ],
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        blank=True,
                        default=datetime.date.today,
                        null=True,
                        verbose_name="DOB",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_encoder", models.BooleanField(default=False)),
                (
                    "profile_picture",
                    models.ImageField(
                        blank=True, null=True, upload_to="profile-images/"
                    ),
                ),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserCommunityRole",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("assigned_at", models.DateTimeField(auto_now_add=True)),
                (
                    "assigned_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_roles",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_links",
                        to="users.communityrole",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="role_links",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "role")},
            },
        ),
        migrations.AddField(
            model_name="communityuser",
            name="community_roles",
            field=models.ManyToManyField(
                blank=True,
                help_text="role/s in the community",
                related_name="users",
                through="users.UserCommunityRole",
                to="users.communityrole",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="communityuser",
            unique_together={("first_name", "last_name")},
        ),
    ]
