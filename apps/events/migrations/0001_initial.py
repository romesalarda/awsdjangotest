# Generated by Django 5.1.5 on 2025-09-10 14:53

import django.core.validators
import django.db.models.deletion
import django_countries.fields
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AreaLocation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "area_id",
                    models.CharField(blank=True, null=True, verbose_name="area-id"),
                ),
                (
                    "area_name",
                    models.CharField(max_length=150, verbose_name="name-of-area"),
                ),
                (
                    "area_code",
                    models.CharField(
                        max_length=3, null=True, unique=True, verbose_name="area-code"
                    ),
                ),
                (
                    "general_address",
                    models.CharField(
                        help_text="general postcode/address", max_length=100
                    ),
                ),
                ("location_description", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="ClusterLocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "cluster_id",
                    models.CharField(max_length=2, verbose_name="cluster-name"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CountryLocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "country",
                    django_countries.fields.CountryField(
                        blank=True, max_length=2, null=True, unique=True
                    ),
                ),
                (
                    "general_sector",
                    models.CharField(
                        choices=[
                            ("EUROPE", "Europe"),
                            ("ASIA", "Asia"),
                            ("NORTH_AMERICA", "North America"),
                            ("CENTRAL_AMERICA", "Central America"),
                            ("SOUTH_AMERICA", "South America"),
                            ("AFRICA", "Africa"),
                            ("OCEANIA", "Oceania"),
                            ("MIDDLE_EAST", "Middle East"),
                        ],
                        verbose_name="general world sector",
                    ),
                ),
                (
                    "specific_sector",
                    models.CharField(
                        choices=[
                            ("NORTH_EUROPE", "Northern Europe"),
                            ("SOUTH_EUROPE", "Southern Europe"),
                            ("WEST_EUROPE", "Western Europe"),
                            ("EAST_EUROPE", "Eastern Europe"),
                            ("CENTRAL_EUROPE", "Central Europe"),
                            ("EAST_ASIA", "East Asia"),
                            ("SOUTH_ASIA", "South Asia"),
                            ("SOUTHEAST_ASIA", "Southeast Asia"),
                            ("CENTRAL_ASIA", "Central Asia"),
                            ("WEST_ASIA", "Western Asia"),
                            ("NORTH_AMERICA", "North America"),
                            ("CENTRAL_AMERICA", "Central America"),
                            ("CARIBBEAN", "Caribbean"),
                            ("SOUTH_AMERICA_NORTH", "Northern South America"),
                            ("SOUTH_AMERICA_SOUTH", "Southern South America"),
                            ("ANDES", "Andean Region"),
                            ("CONO_SUR", "Cono Sur (Southern Cone)"),
                            ("NORTH_AFRICA", "North Africa"),
                            ("WEST_AFRICA", "West Africa"),
                            ("EAST_AFRICA", "East Africa"),
                            ("CENTRAL_AFRICA", "Central Africa"),
                            ("SOUTH_AFRICA", "Southern Africa"),
                            ("AUSTRALIA_NEWZEALAND", "Australia & New Zealand"),
                            ("MELANESIA", "Melanesia"),
                            ("MICRONESIA", "Micronesia"),
                            ("POLYNESIA", "Polynesia"),
                            ("GULF", "Gulf States"),
                            ("LEVANT", "Levant"),
                            ("PERSIAN", "Persian Region"),
                        ],
                        verbose_name="specific world sector",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventParticipant",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "event_pax_id",
                    models.CharField(
                        blank=True, null=True, verbose_name="Participant ID"
                    ),
                ),
                (
                    "participant_type",
                    models.CharField(
                        choices=[
                            ("PARTICIPANT", "Participant"),
                            ("SERVICE_TEAM", "Service_team"),
                            ("OBSERVER", "Observer"),
                            ("GUEST", "Guest"),
                            ("SPEAKER", "Speaker"),
                            ("VOLUNTEER", "Volunteer"),
                        ],
                        default="PARTICIPANT",
                        max_length=20,
                        verbose_name="participant type",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("REGISTERED", "Registered"),
                            ("CONFIRMED", "Confirmed"),
                            ("ATTENDED", "Attended"),
                            ("CANCELLED", "Cancelled"),
                            ("WAITLISTED", "Waitlisted"),
                        ],
                        default="REGISTERED",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "registration_date",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="registration date"
                    ),
                ),
                (
                    "confirmation_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="confirmation date"
                    ),
                ),
                (
                    "attended_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="attended date"
                    ),
                ),
                ("media_consent", models.BooleanField(default=False)),
                ("data_consent", models.BooleanField(default=False)),
                ("understood_registration", models.BooleanField(default=False)),
                (
                    "dietary_restrictions",
                    models.TextField(
                        blank=True, null=True, verbose_name="dietary restrictions"
                    ),
                ),
                (
                    "special_needs",
                    models.TextField(
                        blank=True, null=True, verbose_name="special needs"
                    ),
                ),
                (
                    "emergency_contact",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="emergency contact",
                    ),
                ),
                (
                    "emergency_phone",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        verbose_name="emergency phone",
                    ),
                ),
                (
                    "paid_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        max_digits=10,
                        verbose_name="paid amount",
                    ),
                ),
                (
                    "payment_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="most recent payment date"
                    ),
                ),
                (
                    "notes",
                    models.TextField(blank=True, null=True, verbose_name="notes"),
                ),
                (
                    "verified",
                    models.BooleanField(
                        default=False, verbose_name="participant approved"
                    ),
                ),
            ],
            options={
                "verbose_name": "Event Participant",
                "verbose_name_plural": "Event Participants",
                "ordering": ["registration_date"],
            },
        ),
        migrations.CreateModel(
            name="EventPayment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "stripe_payment_intent",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True
                    ),
                ),
                ("amount", models.IntegerField(help_text="Amount in pence")),
                ("currency", models.CharField(default="gbp", max_length=10)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("SUCCEEDED", "Succeeded"),
                            ("FAILED", "Failed"),
                        ],
                        default="PENDING",
                        max_length=50,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Event Payment",
                "verbose_name_plural": "Event Payments",
            },
        ),
        migrations.CreateModel(
            name="EventPaymentMethod",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "method",
                    models.CharField(
                        choices=[
                            ("STRIPE", "Stripe"),
                            ("BANK", "Bank Transfer"),
                            ("CASH", "Cash / In-Person"),
                            ("PAYPAL", "PayPal"),
                            ("OTHER", "Other"),
                        ],
                        max_length=20,
                        verbose_name="payment method",
                    ),
                ),
                (
                    "account_name",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="account name",
                    ),
                ),
                (
                    "account_number",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="account number",
                    ),
                ),
                (
                    "sort_code",
                    models.CharField(
                        blank=True, max_length=20, null=True, verbose_name="sort code"
                    ),
                ),
                (
                    "iban",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="IBAN"
                    ),
                ),
                (
                    "swift_bic",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="SWIFT/BIC"
                    ),
                ),
                (
                    "instructions",
                    models.TextField(
                        blank=True,
                        help_text="E.g., 'Reference your full name when making the transfer'",
                        null=True,
                        verbose_name="payment instructions",
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="active")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Event Payment Method",
                "verbose_name_plural": "Event Payment Methods",
            },
        ),
        migrations.CreateModel(
            name="EventPaymentPackage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="package name")),
                (
                    "description",
                    models.TextField(
                        blank=True, null=True, verbose_name="package description"
                    ),
                ),
                (
                    "price",
                    models.IntegerField(
                        help_text="Store in smallest currency unit (e.g., pence for GBP, cents for USD)",
                        verbose_name="price (in pence)",
                    ),
                ),
                ("currency", models.CharField(default="gbp", max_length=10)),
                (
                    "capacity",
                    models.IntegerField(
                        blank=True,
                        help_text="Optional: limit how many people can buy this package",
                        null=True,
                        verbose_name="max capacity",
                    ),
                ),
                (
                    "available_from",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="available from"
                    ),
                ),
                (
                    "available_until",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="available until"
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="active")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Event Payment Package",
                "verbose_name_plural": "Event Payment Packages",
            },
        ),
        migrations.CreateModel(
            name="EventResource",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="resource id",
                    ),
                ),
                (
                    "resource_name",
                    models.CharField(verbose_name="public resource name"),
                ),
                (
                    "resource_link",
                    models.CharField(
                        blank=True, null=True, verbose_name="public resource link"
                    ),
                ),
                (
                    "resource_file",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="public-event-file-resources",
                        verbose_name="file resource",
                    ),
                ),
                (
                    "image",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="public-event-image-resources",
                        verbose_name="image resource",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("public_resource", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="EventRole",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="event role id",
                    ),
                ),
                (
                    "role_name",
                    models.CharField(
                        choices=[
                            ("ASSISTANT_TEAM_LEADER", "Assistant Team Leader"),
                            ("CAMP_SERVANT", "Camp Servant"),
                            ("FACILITATOR", "Facilitator"),
                            ("GAMES_MASTER", "Games Master"),
                            ("COUPLE_COORDINATOR", "Couple Coordinator"),
                            ("SHARER", "Sharer"),
                            ("SPEAKER", "Speaker"),
                            ("TEAM_LEADER", "Team Leader"),
                            ("WORSHIP_LEADER", "Worship Leader"),
                            ("TECH_SUPPORT", "Tech Support"),
                            ("YOUTH_OBSERVER", "Youth Observer"),
                            ("CFC_OBSERVER", "CFC Observer"),
                            ("CFC_HELPER", "CFC Helper"),
                            ("CFC_COORDINATOR", "Coordinator"),
                            ("SFC_HELPER", "SFC Helper"),
                            ("VOLUNTEER", "Volunteer"),
                            ("ORGANIZER", "Organizer"),
                            ("SECRETARIAT", "Secretariat"),
                            ("PROGRAMME", "Programme"),
                            ("PFO", "PFO"),
                            ("PRODUCTION", "Production"),
                            ("LOGISTICS", "Logistics"),
                            ("MUSIC_MINISTRY", "Music Ministry"),
                            ("LITURGY", "Liturgy"),
                            ("COMPETITIONS", "Competitions"),
                            ("PROMOTIONS", "Promotions"),
                            ("DOCUMENTATION", "Documentation"),
                            ("EVENT_HEADS", "Event_heads"),
                            ("GENERAL_SERVICES", "General Services"),
                            ("CATERING", "Catering"),
                        ],
                        max_length=50,
                        unique=True,
                        verbose_name="role name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, null=True, verbose_name="role description"
                    ),
                ),
            ],
            options={
                "verbose_name": "Event Role",
                "verbose_name_plural": "Event Roles",
                "ordering": ["role_name"],
            },
        ),
        migrations.CreateModel(
            name="EventServiceTeamMember",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="serivce team member id",
                    ),
                ),
                ("head_of_role", models.BooleanField(default=False)),
                ("assigned_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Event Service Team Member",
                "verbose_name_plural": "Event Service Team Members",
            },
        ),
        migrations.CreateModel(
            name="EventTalk",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="talk title")),
                (
                    "talk_type",
                    models.CharField(
                        choices=[
                            ("TALK", "Talk"),
                            ("SHARING", "Sharing"),
                            ("WORKSHOP", "Workshop"),
                            ("BREAKOUT", "Breakout Session"),
                            ("PLENARY", "Plenary Session"),
                        ],
                        default="TALK",
                        max_length=20,
                        verbose_name="talk type",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="description"),
                ),
                (
                    "objective",
                    models.TextField(blank=True, null=True, verbose_name="objective"),
                ),
                ("start_time", models.DateTimeField(verbose_name="start time")),
                ("end_time", models.DateTimeField(verbose_name="end time")),
                (
                    "duration_minutes",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="duration in minutes",
                    ),
                ),
                (
                    "speaker_bio",
                    models.TextField(blank=True, null=True, verbose_name="speaker bio"),
                ),
                (
                    "venue",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="venue"
                    ),
                ),
                (
                    "room",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="room"
                    ),
                ),
                (
                    "slides_url",
                    models.URLField(blank=True, null=True, verbose_name="slides URL"),
                ),
                (
                    "handout_url",
                    models.URLField(blank=True, null=True, verbose_name="handout URL"),
                ),
                (
                    "video_url",
                    models.URLField(blank=True, null=True, verbose_name="video URL"),
                ),
                (
                    "is_published",
                    models.BooleanField(default=True, verbose_name="is published"),
                ),
            ],
            options={
                "verbose_name": "Event Talk",
                "verbose_name_plural": "Event Talks",
                "ordering": ["start_time"],
            },
        ),
        migrations.CreateModel(
            name="EventVenue",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(verbose_name="venue name")),
                (
                    "address_line_1",
                    models.CharField(
                        blank=True, null=True, verbose_name="venue address line 1"
                    ),
                ),
                (
                    "address_line_2",
                    models.CharField(
                        blank=True, null=True, verbose_name="venue address line 2"
                    ),
                ),
                (
                    "address_line_3",
                    models.CharField(
                        blank=True, null=True, verbose_name="venue address line 2"
                    ),
                ),
                (
                    "postcode",
                    models.CharField(
                        blank=True, null=True, verbose_name="venue address"
                    ),
                ),
                (
                    "max_allowed_people",
                    models.IntegerField(default=0, verbose_name="max allowed people"),
                ),
                (
                    "venue_type",
                    models.CharField(
                        choices=[
                            ("ACCOMODATION", "Accomodation"),
                            ("MAIN_VENUE", "Main Venue"),
                            ("SECONDARY_VENUE", "Secondary Venue"),
                            ("SPORTS_VENUE", "Sports Venue"),
                        ],
                        default="MAIN_VENUE",
                        verbose_name="type of venue",
                    ),
                ),
                (
                    "primary_venue",
                    models.BooleanField(
                        blank=True,
                        default=True,
                        null=True,
                        verbose_name="is primary venue",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventWorkshop",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "title",
                    models.CharField(max_length=200, verbose_name="workshop title"),
                ),
                ("description", models.TextField(verbose_name="description")),
                ("objectives", models.TextField(verbose_name="learning objectives")),
                ("start_time", models.DateTimeField(verbose_name="start time")),
                ("end_time", models.DateTimeField(verbose_name="end time")),
                (
                    "duration_minutes",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="duration in minutes",
                    ),
                ),
                (
                    "max_participants",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="maximum participants",
                    ),
                ),
                (
                    "min_participants",
                    models.IntegerField(
                        default=1,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="minimum participants",
                    ),
                ),
                (
                    "venue",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="venue"
                    ),
                ),
                (
                    "room",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="room"
                    ),
                ),
                (
                    "prerequisites",
                    models.TextField(
                        blank=True, null=True, verbose_name="prerequisites"
                    ),
                ),
                (
                    "materials_needed",
                    models.TextField(
                        blank=True, null=True, verbose_name="materials needed"
                    ),
                ),
                (
                    "participant_preparation",
                    models.TextField(
                        blank=True, null=True, verbose_name="participant preparation"
                    ),
                ),
                (
                    "resource_materials",
                    models.TextField(
                        blank=True, null=True, verbose_name="resource materials"
                    ),
                ),
                (
                    "handout_url",
                    models.URLField(blank=True, null=True, verbose_name="handout URL"),
                ),
                (
                    "is_published",
                    models.BooleanField(default=True, verbose_name="is published"),
                ),
                ("is_full", models.BooleanField(default=False, verbose_name="is full")),
            ],
            options={
                "verbose_name": "Event Workshop",
                "verbose_name_plural": "Event Workshops",
                "ordering": ["start_time"],
            },
        ),
        migrations.CreateModel(
            name="ExtraQuestion",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "question_name",
                    models.CharField(max_length=255, verbose_name="name of question"),
                ),
                ("question_body", models.TextField(verbose_name="question proper")),
                (
                    "question_type",
                    models.CharField(
                        choices=[
                            ("TEXT", "Text"),
                            ("TEXTAREA", "Text Area"),
                            ("INTEGER", "Integer"),
                            ("BOOLEAN", "Yes/No"),
                            ("CHOICE", "Single Choice"),
                            ("MULTICHOICE", "Multiple Choice"),
                        ],
                        max_length=20,
                        verbose_name="question type",
                    ),
                ),
                ("required", models.BooleanField(default=False)),
                ("order", models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name="QuestionAnswer",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("answer_text", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="QuestionChoice",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("text", models.CharField(max_length=255)),
                ("value", models.CharField(blank=True, max_length=100, null=True)),
                ("order", models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name="SearchAreaSupportLocation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100, verbose_name="name of relative location"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UnitLocation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "unit_id",
                    models.CharField(blank=True, null=True, verbose_name="unit-id"),
                ),
                ("unit_name", models.CharField(max_length=2, verbose_name="unit name")),
            ],
        ),
        migrations.CreateModel(
            name="ChapterLocation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "chapter_id",
                    models.CharField(blank=True, null=True, verbose_name="chapter-id"),
                ),
                (
                    "chapter_name",
                    models.CharField(max_length=150, verbose_name="name-of-chapter"),
                ),
                (
                    "chapter_code",
                    models.CharField(
                        max_length=3, null=True, verbose_name="chapter-code"
                    ),
                ),
                (
                    "cluster",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chapters",
                        to="events.clusterlocation",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="clusterlocation",
            name="world_location",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="clusters",
                to="events.countrylocation",
            ),
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("YOUTH_CAMP", "YYC"),
                            ("CONFERENCE", "CNF"),
                            ("RETREAT", "RTR"),
                            ("WORKSHOP", "WKS"),
                            ("TRAINING", "TRN"),
                            ("PFO", "PFO"),
                            ("HOUSEHOLD", "HLD"),
                            ("FELLOWSHIP", "FLS"),
                            ("OTHER", "OTH"),
                        ],
                        default="YOUTH_CAMP",
                        max_length=20,
                        verbose_name="event type",
                    ),
                ),
                (
                    "event_code",
                    models.CharField(
                        blank=True,
                        help_text="Event code that is shared around and for participant convenience. E.g. CNF26ANCRD - tells you it's a conference in 2026 with the name ANCHORED",
                        null=True,
                        verbose_name="event code",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, null=True, verbose_name="event description"
                    ),
                ),
                (
                    "sentence_description",
                    models.CharField(
                        blank=True,
                        help_text="A brief one-sentence description of the event, for promotional purposes. E.g. A youth camp to anchor our faith in Christ.",
                        max_length=300,
                        null=True,
                        verbose_name="sentence description",
                    ),
                ),
                (
                    "landing_image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="event-landing-images/",
                        verbose_name="event landing image",
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False, null=True, verbose_name="is event public"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=200, null=True, verbose_name="event name"
                    ),
                ),
                (
                    "name_code",
                    models.CharField(
                        blank=True,
                        help_text="Short code for the event name, used in generating the event code E.g. for ANCHORED event, use ANCRD",
                        max_length=5,
                        null=True,
                        validators=[django.core.validators.MaxLengthValidator(5)],
                        verbose_name="event name code",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="event start date"
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="event end date"
                    ),
                ),
                (
                    "area_type",
                    models.CharField(
                        choices=[
                            ("AREA", "Area"),
                            ("UNIT", "Unit"),
                            ("CLUSTER", "Cluster"),
                            ("NATIONAL", "National"),
                            ("CONTINENTAL", "Continental"),
                            ("INTERNATIONAL", "International"),
                        ],
                        default="AREA",
                        max_length=20,
                        verbose_name="area type",
                    ),
                ),
                (
                    "number_of_pax",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="number of participants",
                    ),
                ),
                (
                    "theme",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="event theme",
                    ),
                ),
                (
                    "anchor_verse",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="anchor verse",
                    ),
                ),
                (
                    "notes",
                    models.TextField(blank=True, null=True, verbose_name="event notes"),
                ),
                (
                    "areas_involved",
                    models.ManyToManyField(
                        blank=True,
                        related_name="involved_in_events",
                        to="events.arealocation",
                    ),
                ),
            ],
        ),
    ]
